package com.java.synchronize;

class GenerateNumberTask implements Runnable{
	private int MAX;
	private boolean isEven;
	private PrintNumber print;
	
	public GenerateNumberTask(int MAX , boolean isEven , PrintNumber print) {
		this.MAX = MAX;
		this.isEven = isEven;
		this.print = print;
	}
	
	@Override
	public void run() {

		int number = isEven?2:1;
		while(number<=MAX) {
			if(isEven) {
				//Print Even
				
			}
			else {
				//Print Odd
			}
			number = number + 2;
		}
		
	}
	
}

class PrintNumber{
	//Default value --> FALSE
	volatile boolean isOdd;
	
	synchronized public void printOdd(int number) {
		while(isOdd) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		isOdd = true;
		System.out.println(number);
		notify();
	}
	
	synchronized public void printEven(int number) {
		while(isOdd) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		isOdd = false;
		System.out.println(number);
		notify();
	}
}

public class ThreadSynchronization{
	public static void main(String[] args) {
		
		PrintNumber print = new PrintNumber();
		
		Thread threadOdd = new Thread(new GenerateNumberTask(10, false , print),"Odd");
		Thread threadEven = new Thread(new GenerateNumberTask(10, true , print),"Even");
		
		threadOdd.start();
		threadEven.start();
		
		
	}
}
